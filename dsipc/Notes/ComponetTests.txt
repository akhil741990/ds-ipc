

For RPC Client Server Communication , refer the Test : TestRPCCompatibility

Protobuff dependency is not resolved in hadoop-common need to fix it



Generate ProtoBuff classes : https://stackoverflow.com/questions/23139066/package-org-apache-hadoop-ipc-protobuf-empty


Try cd to path "/hadoop-common-project/hadoop-common/src/test/proto" and execute following command:protoc --java_out=../java *.proto.  



===========================

Error :  sun.misc.SignalHandler is Sun proprietary API and may be removed in a future release

https://stackoverflow.com/questions/13855700/suppress-javac-warning-is-internal-proprietary-api-and-may-be-removed-in-a-f

Resolution : 

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <compilerArgument>-XDignore.symbol.file</compilerArgument>
    </configuration>
</plugin>

===================

Client.java:

 // Format of a call on the wire:
  // 0) Length of rest below (1 + 2)
  // 1) RpcRequestHeader  - is serialized Delimited hence contains length
  // 2) RpcRequest
  //


21/09/2019
From the Junit Test : TestRPCCompatibility


Proxy.ping() ---- > WritableRpcEngine.invoke()


Need to debug how this redirection works


14/10/2019 :

Look for Java reflection : InvocationHandler ---> CompositeInvocationHandlerImpl
/**
 * <code>InvocationHandler</code> is the interface implemented by
 * the <i>invocation handler</i> of a proxy instance.
 *
 * <p>Each proxy instance has an associated invocation handler.
 * When a method is invoked on a proxy instance, the method
 * invocation is encoded and dispatched to the <code>invoke</code>
 * method of its invocation handler.
  */


Refer : http://tutorials.jenkov.com/java-reflection/dynamic-proxies.html




=====================

15/11/2019 : 

Java Google Protopbuf tutorial :  https://developers.google.com/protocol-buffers/docs/javatutorial


Command to generate proto classes :
akhil@akhil-ML-box:~/ML/ds-ipc/dsipc/proto$ protoc --java_out=../src/main/java *.proto



19/11/2-19 :


public Object invoke(Object proxy, Method method, Object[] args)
Invoker consructs the RpcHeader from the ProtoBuf object == > private RequestHeaderProto constructRpcRequestHeader(Method method)
args[1] == Protobuf objects
RpcHeader and args[1] is wrapped into RpcRequestWrapper
Client.sendRpcRequest() === > write the request on the wire






22/11/2019 :

1)The client program will get the ProtocolProxy to invoke methods on the RpcServer
2)For each method call on the proxy,a new Socket Connection will be setup 
3)A dedicated Thread to read responses for the sent request will be runing in the Background
The the RpcRequest will be written to OutPutStream of this socket.
 A mapping of requestId and client sockets will be maintained to co-relate the response 

 
 
 
 
 
 

05/12/2019 :

After reading the RpcRequest on ServerSide, put it into a CallQ.
A Server Deamon Thread will pick up the request from the Q and invoke the method
Write an invoker on Server side which will fetch the relevant RpcServer and call the the requested method by Reflection



================================================================================================

06/12/2019 :

Need to debug : Exception in thread "Thread-3" java.lang.ClassCastException: com.soul.dsipc.server.protocol.impl.DataNodeProtocolImpl cannot be cast to com.google.protobuf.BlockingService
	at com.soul.dsipc.rpc.RpcServiceImplRouter.run(RpcServiceImplRouter.java:49)


Hint :
RPC.java
 ProtocolMetaInfoServerSideTranslatorPB xlator = 
          new ProtocolMetaInfoServerSideTranslatorPB(this);
      BlockingService protocolInfoBlockingService = ProtocolInfoService
          .newReflectiveBlockingService(xlator);
      
==================================================================================================          
          
          






